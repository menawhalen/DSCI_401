---
title: "Data Vis"
format:
  html:
    self-contained: true
editor: visual
---

# **Types of Plots**

### **One Variable Plots (Univariate):**

1.  Numeric Variables:

-   Histogram: Visualize the distribution of a numeric variable.

-   Density Plot: Similar to a histogram but with a smooth curve.

-   Boxplot: Display the distribution’s summary statistics and outliers.

-   Violin Plot: Combines a box plot and a density plot.

2.  Categorical Variables:

-   Bar Plot: Display the frequencies or proportions of different categories. (The only good one!!!)

-   Pie Chart: Represent proportions of different categories in a circular format. (Please don’t use..)

-   Dot Plot: Show individual data points along a category. (Still not very good..)

### **Two Variable Plots:**

1.  Numeric vs. Numeric:

-   Scatter Plot: Visualize the relationship between two numeric variables.

-   Line Plot: Display (connected) changes over time or another continuous variable.

2.  Numeric vs. Categorical (Side-by-Side):

-   Box Plot: Compare numeric values across different categories.

-   Violin Plot: Compare the distribution of numeric values across categories.

-   Bar Plot: Show numeric values within different categories.

3.  Categorical vs. Categorical:

-   Grouped Bar Plot: Compare frequencies or proportions of multiple categorical variables side by side.

-   Stacked Bar Plot: Similar to a grouped bar plot, but bars are stacked.

### **Three Variable Plots:**

1.  Numeric vs. Numeric vs. Categorical:

-   Faceted Plot: Create multiple small plots based on a third categorical variable.

-   Bubble Plot: Similar to a scatter plot, but with bubbles of varying sizes representing a third variable.

2.  Categorical vs. Categorical vs. Numeric:

-   Heatmap: Display the relationship between two categorical variables using color intensity.

### **Multivariate Plots:**

1.  Numeric vs. Numeric vs. Numeric:

-   3D Scatter Plot: Visualize the relationship between three numeric variables in three dimensions.

2.  Categorical vs. Categorical vs. Categorical:

-   Mosaic Plot: Display the relationship between three categorical variables using rectangular tiles.

Remember, the choice of plot depends on the research question, the variables you have, and the story you want to tell with your data. Each type of plot emphasizes different aspects of the data, so it’s important to choose the one that effectively communicates the insights you want to convey.

We will only have time to discuss one and two variable plots but with the option to add more aesthetics like color and shape based on categorical information.

# Base R

```{r}
library(mdsr)
library(tidyverse)
data("CIACountries")
```

```{r}
plot(CIACountries$gdp, 
     CIACountries$educ)
```

Add axis labels

```{r}
plot(CIACountries$gdp, 
     CIACountries$educ, 
     xlab = "GDP",
     ylab = "Education")
```

Change the shape

```{r}
plot(CIACountries$gdp, 
     CIACountries$educ, 
     xlab = "GDP",
     ylab = "Education",
     pch = 16)
```

Change the color

```{r}
plot(CIACountries$gdp, 
     CIACountries$educ, 
     xlab = "GDP",
     ylab = "Education",
     pch = 16, 
     col = "red")
```

Change the x and y limits

```{r}
plot(CIACountries$gdp, 
     CIACountries$educ, 
     xlab = "GDP",
     ylab = "Education",
     pch = 16, 
     col = "red", 
     xlim = c(0,150000), 
     ylim = c(0,15))
```

Change the x and y limits

```{r}
plot(CIACountries$gdp, 
     CIACountries$educ, 
     xlab = "GDP",
     ylab = "Education",
     pch = 16, 
     col = "red", 
     xlim = c(0,150000), 
     ylim = c(0,15))
```

Aspect Ratio

```{r}
plot(CIACountries$gdp, 
     CIACountries$educ, 
     xlab = "GDP",
     ylab = "Education",
     pch = 16, 
     col = "red", 
     xlim = c(0,150000), 
     ylim = c(0,15), 
     asp = 10000)
```

Change axis labels

```{r}
plot(CIACountries$gdp, 
     CIACountries$educ, 
     xlab = "GDP",
     ylab = "Education",
     pch = 16, 
     col = "red", 
     xlim = c(0,150000), 
     ylim = c(0,15), 
     asp = 10000, 
     xaxt = 'n', 
     yaxt = 'n')

axis(1, c(0,100000,200000), c("None","A little","A lot"))
axis(2, c(0,5,10,15), c("None","Ok","Good","Great"))
```

Size

```{r}
plot(CIACountries$gdp, 
     CIACountries$educ, 
     xlab = "GDP",
     ylab = "Education",
     pch = 16, 
     col = "red", 
     xlim = c(0,150000), 
     ylim = c(0,15), 
     asp = 10000, 
     xaxt = 'n', 
     yaxt = 'n', 
     cex = 0.5)

axis(1, c(0,100000,200000), c("None","A little","A lot"))
axis(2, c(0,5,10,15), c("None","Ok","Good","Great"))
```

# **ggplot2**

## **Syntax and Structure:**

Fundamental components of ggplot2:

-   Data Layer: The dataset you’re working with.

-   Aesthetics Mapping (aes): How data variables map to plot aesthetics like position, color, shape, etc.

-   Geometric Objects (geom): The visual elements to represent the data (points, lines, bars, etc.).

-   Facets (facet_wrap or facet_grid): Splitting data into subplots based on a variable.

-   Theme: Controlling the overall appearance of the plot.

*Data Layer:* The data layer is where you specify the dataset that you want to visualize. It’s the foundation of your plot and determines what information will be represented. In the data layer, you provide the actual data frame or data source you want to use for plotting. This data source should contain the variables you’ll use in your plot.

*Aesthetic Layer:* The aesthetic layer defines how variables from the dataset are visually represented in the plot. It maps data variables to visual properties of the plot such as position, color, size, shape, and transparency. The aesthetic mappings are set using the `aes()` function, which stands for aesthetics.

*Geom Layer:* The geom layer is responsible for creating the graphical elements that you see on the plot. Each type of visualization, like points, lines, bars, etc., is represented by a different geom. The choice of geom depends on the type of data you have and the story you want to tell.

For example, in a scatter plot, you would map the x and y coordinates of your data to the position of the points on the plot. You might also map a categorical variable to the color of the points and a numeric variable to the size of the points. This aesthetic layer gives visual cues about the relationships and patterns in your data.

```         
# Assume dataset contains variables 'x' and 'y' (numeric) and 'cat' (categorical) 
ggplot(data = dataset, aes(x = x, y = y, color = cat)) +   
geom_point()  # This is a geometric layer for scatter plot
```

```{r}
library(ggplot2)
ggplot(aes(x = gdp, y = educ),data = CIACountries) + geom_point()

#CIACountries %>% ggplot(aes(x = gdp, y = educ)) + geom_point()
```

Add axis labels

```{r}
ggplot(aes(x = gdp, y = educ), data = CIACountries) +
  geom_point() + 
  xlab("GDP (in millions)") + 
  ylab("Education")
```

Change the shape

```{r}
ggplot(aes(x = gdp, y = educ), data = CIACountries) +
  geom_point(shape = 21) +
  xlab("GDP") +
  ylab("Education")
```

Change the color

```{r}
ggplot(aes(x = gdp, y = educ), data = CIACountries) +
  geom_point(shape = 23, color = "red") +
  xlab("GDP") +
  ylab("Education") 
```

Change the x and y limits

```{r}
ggplot(aes(x = gdp, y = educ), data = CIACountries) +
  geom_point(shape = 23, colour = "red") +
  xlab("GDP") +
  ylab("Education") + 
  xlim(0,200000) + 
  ylim(0,15)
```

Aspect Ratio

```{r}
ggplot(aes(x = gdp, y = educ), data = CIACountries) +
  geom_point(shape = 23, colour = "red") +
  xlab("GDP") +
  ylab("Education") + 
  xlim(0,200000) + 
  ylim(0,15) + 
  coord_fixed(ratio=10000)
```

Change axis values

```{r}
ggplot(aes(x = gdp, y = educ), data = CIACountries) +
  geom_point(shape = 23, colour = "red") +
  xlab("GDP") +
  ylab("Education") + 
  xlim(0,200000) + 
  ylim(0,15) + 
  coord_fixed(ratio=10000) + 
  scale_x_continuous(breaks = c(0,100000,200000),
                     labels = c("None","A little","A lot"), 
                     limits = c(0,200000)) + 
  scale_y_continuous(breaks = c(0,5,10,15),
                     labels = c("None","Ok","Good","Great"),
                     limits = c(0,15)
                     )
#Note: scale_x_continuous overrules the xlim!
```

Size

```{r}
ggplot(aes(x = gdp, y = educ), data = CIACountries) +
  geom_point(shape = 23, colour = "red", size = 0.5) +
  xlab("GDP") +
  ylab("Education") + 
  xlim(0,200000) + 
  ylim(0,15) + 
  coord_fixed(ratio=10000) + 
  scale_x_continuous(breaks = c(0,100000,200000),
                     labels = c("None","A little","A lot"), 
                     limits = c(0,200000)) + 
  scale_y_continuous(breaks = c(0,5,10,15),
                     labels = c("None","Ok","Good","Great"),
                     limits = c(0,15)
                     )

```

# Univariate displays

### Histograms

```{r}
library(mdsr)
data("SAT_2010")
```

```{r}
#Base R
hist(SAT_2010$math)
#ggplot
ggplot(aes(x = math), data = SAT_2010) + geom_histogram()
#gggplot with breaks
ggplot(aes(x = math), data = SAT_2010) + geom_histogram(breaks = c(400,450,550,600,700))
```

```{r}
#Base R
dens <- density(SAT_2010$math)
plot(dens$x, dens$y, type = "l")
#ggplot
#This is a lot cleaner code and nicer looking!
ggplot(aes(x = math), data = SAT_2010) + geom_density()

#More jagged
ggplot(aes(x = math), data = SAT_2010) + geom_density(bw = 10000)
```

```{r}
sub <- head(SAT_2010, 10)
sub <- sub[order(sub$math),]
barplot(sub$math, names.arg = sub$state)

#ggplot
ggplot(
  data = head(SAT_2010, 10), 
  aes(x = reorder(state, math), y = math)
) +
  geom_col() +
  labs(x = "State", y = "Average math SAT score")

ggplot(
  data = head(SAT_2010, 10), 
  aes(x = state, y = math)
) +
  geom_col() +
  labs(x = "State", y = "Average math SAT score")

```

### Stacked bar chart

```{r}
library(mosaicData)
ggplot(data = mosaicData::HELPrct, aes(x = homeless)) + 
  geom_bar(aes(fill = substance), position = "fill") 

ggplot(data = mosaicData::HELPrct, aes(x = homeless)) + 
  geom_bar(aes(fill = substance), position = "fill") +
  scale_fill_brewer(palette = "Spectral") 


ggplot(data = mosaicData::HELPrct, aes(x = homeless)) + 
  geom_bar(aes(fill = substance), position = "fill") +
  scale_fill_brewer(palette = "Spectral") + 
  coord_flip()

```

### Multivariate displays

```{r}

g <- ggplot(
  data = SAT_2010, 
  aes(x = expenditure, y = math)
) + 
  geom_point()

```

We can easily add a trend line with ggplot.

```{r}
g + 
  geom_smooth(method = "loess", se = FALSE) + 
  xlab("Average expenditure per student ($1000)") +
  ylab("Average score on math SAT")
```

```{r}
#Reversed the order.  
g <- ggplot(
  data = SAT_2010, 
  aes(x = expenditure, y = math)
) + 
  geom_smooth() + geom_point()
```

To do this in base R you have to do this:

```{r}
plot(SAT_2010$expenditure, SAT_2010$math)
a <- loess(SAT_2010$math ~ SAT_2010$expenditure)
points(a$x[order(a$x)], a$fitted[order(a$x)], type = "l", col = "red")
```

```{r}
SAT_2010 <- SAT_2010 %>%
  mutate(
    SAT_rate = cut(
      sat_pct, 
      breaks = c(0, 30, 60, 100), 
      labels = c("low", "medium", "high")
    )
  )
#g <- g %+% SAT_2010
#g + aes(color = SAT_rate)
#To this in base R is possible, but it is a pain!


#Full code: 
ggplot(data = SAT_2010, aes(x = expenditure, y = math)) + 
  geom_point(aes(color = SAT_rate)) + geom_smooth(aes(color = SAT_rate), method = "lm", se = FALSE) + scale_colour_brewer(palette = "Spectral") 
```

### Faceting

```{r}
#Base R
par(mfrow = c(1, 3))

plot(SAT_2010$expenditure[SAT_2010$SAT_rate == "low"],
     SAT_2010$math[SAT_2010$SAT_rate == "low"],
     xlab = "expenditure",
     ylab = "math score")

plot(SAT_2010$expenditure[SAT_2010$SAT_rate == "medium"],
     SAT_2010$math[SAT_2010$SAT_rate == "medium"],
     xlab = "expenditure",
     ylab = "math score")

plot(SAT_2010$expenditure[SAT_2010$SAT_rate == "high"],
     SAT_2010$math[SAT_2010$SAT_rate == "high"],
     xlab = "expenditure",
     ylab = "math score")
```

So much easier in ggplot!

```{r}
#g + facet_wrap( ~SAT_rate )
#g + facet_grid(~ SAT_rate )
```

```{r}
#full code
SAT_2010 <- SAT_2010 %>%
  mutate(SAT_rate = cut(
    sat_pct,
    breaks = c(0, 30, 60, 100),
    labels = c("low", "medium", "high")
  ))
g <- ggplot(data = SAT_2010,
            aes(x = expenditure, y = math)) +
  geom_point() + geom_smooth(method = "lm") + facet_wrap( ~ SAT_rate)
g

```

NHANES example

```{r}
library(NHANES)
ggplot(
  data = slice_sample(NHANES, n = 1000), 
  aes(x = Age, y = Height, color = Gender)
) + 
  geom_point() + 
  geom_smooth() + 
  xlab("Age (years)") + 
  ylab("Height (cm)") +
  labs(color = "Gender")
```

```{r}
#relevel the reference category
library(NHANES)
ggplot(
  data = slice_sample(NHANES, n = 1000), 
  aes(x = Age, y = Height, color = fct_relevel(Gender, "male"))
) + 
  geom_point() + 
  geom_smooth() + 
  xlab("Age (years)") + 
  ylab("Height (cm)") +
  labs(color = "Gender")
```

```{r}
library(macleish)
ggplot(data = whately_2015, aes(x = when, y = temperature)) + 
  geom_line(color = "darkgray") + 
  geom_smooth() + 
  xlab(NULL) + 
  ylab("Temperature (degrees Celsius)")
```

Check out the extended example here: <https://mdsr-book.github.io/mdsr2e/ch-vizII.html#sec:babynames>

# In class exercise

Using the cubs_all_time.csv create a visualizations to examine these questions.

-   

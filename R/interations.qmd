---
title: "Maps (Apply)"
format:
  html:
    self-contained: true
editor: visual
---

## Apply (Base R)

### `apply` vs. `map`

The apply family of functions (`apply`,`lapply`,`sapply`,`vapply`) has traditionally been a go-to tool for applying functions across rows or columns of data, or over elements in lists. While apply functions are still widely used, map functions from the`purrr`package offer similar functionality with additional benefits, like better compatibility with the pipe (`%\>%\`) and more intuitive outputs.

### `apply` with Matrices and Data Frames

`apply` is often used for applying functions over rows or columns in a matrix or data frame. For instance: Here's a brief overview of how `apply` functions work and how you might achieve similar outcomes using map.

```{r}
# Create a matrix
matrix_data <- matrix(1:9, nrow = 3)

# Apply the `sum` function to each row (MARGIN = 1)
row_sums <- apply(matrix_data, MARGIN = 1, FUN = sum)
row_sums

# Apply the `sum` function to each column (MARGIN = 2)
col_sums <- apply(matrix_data, MARGIN = 2, FUN = sum)
col_sums

```

In the example above:

-   `MARGIN = 1` applies the function to each row.

-   `MARGIN = 2` applies the function to each column.

### `lapply`, `sapply`, and `vapply` for Lists and Vectors

When working with lists or vectors, you can use `lapply` and `sapply`. These functions return the results in slightly different formats:

-   `lapply` returns a list.

-   `sapply` tries to simplify the result into a vector or matrix, if possible.

-   `vapply` is similar to `sapply`, but it requires you to specify the output type for more reliability.

Example with `sapply`:

```{r}
# Create a vector
values <- c(1, 2, 3, 4)

# Square each value using sapply
squared_values <- sapply(values, function(x) x^2)
squared_values

```

### Moving to `map` in the Pipe

With the rise of the tidyverse, `map` has become a more popular option, especially within pipes, where it can be more readable and flexible. The `map` functions also include type-specific options (`map_dbl`, `map_chr`, etc.) to simplify results directly into vectors, like `sapply`.

```{r}
# Using map to achieve the same result
library(purrr)

squared_values_map <- map_dbl(values, ~ .x^2)
squared_values_map

```

## Map

The `map` function is a powerful tool in the tidyverse package that allows you to *apply a function to each element of a list or vector*, and then returns a list containing the results. It's particularly useful when you have repetitive tasks to perform on multiple elements. This function is part of the `purrr` package within the tidyverse.

Here is an example of map working where we define a function that squares each item in a vector.

```{r map_sq, message=FALSE}
library(tidyverse)
# Create a list of values
values <- c(2, 4, 6, 8)

# Define a function to be applied
square <- function(x) {
  return(x^2)
}

# Use map to apply the function to each element
result <- map(values, square)

# The result is a list with squared values
result
## To get results back to a vector unlist()
unlist(result)
```

The map function is especially handy when you have complex tasks, such as reading multiple files, performing calculations on multiple datasets, or creating multiple plots. It helps you avoid writing repetitive code and enhances the readability of your code.

For instance, suppose you have a list of file names and you want to read each file and perform some operations on its content:

```         
  files <- c("file1.csv", "file2.csv", "file3.csv")
  
  # Define a function to read and process a file
  process_file <- function(filename) {
    data <- read_csv(filename)
    # Perform operations on 'data'
    return(processed_data)
  }
  
  # Use map to process each file
  processed_files <- map(files, process_file)
```

### Practice with the `penguins` dataset

`nest` is used to group data into a nested structure. When combined with map, you can apply a function to each nested group separately and return the results as a new column.

```{r pen_map}
library(palmerpenguins)
data("penguins")

penguins %>% 
  group_by(sex) %>% 
  summarise(mean_length = mean(bill_length_mm, na.rm = TRUE))

 penguins %>% 
  group_by(species) %>% 
  nest() %>% 
  mutate(mean_body_mass = map(data, ~ mean(.x$body_mass_g, na.rm = TRUE)),
         mean_bill_length = map(data, ~ mean(.x$bill_length_mm, na.rm = TRUE)),
         mean_bill_depth = map(data, ~ mean(.x$bill_depth_mm, na.rm = TRUE)))
 
```

`map` returns a list where each element contains the output of applying the specified function to the corresponding element of the input data. It's useful when you expect the output to have different types or structures.

`map_dbl` specifically returns a numeric vector. It's useful when you expect the output to be a numeric value, and it simplifies the output into a vector.

```{r map_pen_dbl}
 ## use map_dbl for number outputs
  penguins %>% 
  group_by(species) %>% 
  nest() %>% 
  mutate(mean_body_mass = map_dbl(data, ~ mean(.x$body_mass_g, na.rm = TRUE)),
         mean_bill_length = map_dbl(data, ~ mean(.x$bill_length_mm, na.rm = TRUE)),
         mean_bill_depth = map_dbl(data, ~ mean(.x$bill_depth_mm, na.rm = TRUE)))

```

### `Map2`

### **Mapping over Multiple Lists with `map2`**

Students can use `map2` to apply functions that need two input vectors. Here, we calculate the BMI for a list of weights and heights.

```{r}
weights <- c(60, 72, 90)
heights <- c(1.65, 1.75, 1.80)

# Define a function to calculate BMI
calc_bmi <- function(weight, height) {
  weight / (height^2)
}

# Use map2 to apply calc_bmi on both vectors
bmis <- map2_dbl(weights, heights, calc_bmi)
bmis

```

Now use a function we make with nesting and mapping together.

```{r nest_map_funct}
# Define a function to calculate mean and median flipper length
## puts in a whole dataset (helpful for nest)

calculate_stats <- function(data) {
  mean_length <- mean(data$flipper_length_mm, na.rm = TRUE)
  median_length <- median(data$flipper_length_mm, na.rm = TRUE)
  
  return(data.frame(mean_length, median_length))
}

# Group data by species and island
## then use calculate_stats
peng_stats <- penguins %>% 
  group_by(species, island) %>% 
  nest() %>% 
  mutate(stats = map(data, calculate_stats)) 

peng_stats
## cant really see it
## need to select and unnest the dataframe
peng_stats %>% 
  select(stats) %>%
  unnest()

### another way

penguins %>%
  group_by(species, island) %>%
  nest() %>%
  mutate(
    stats = map(data, ~ tibble(
      mean_flipper = mean(.x$flipper_length_mm, na.rm = TRUE),
      sd_flipper = sd(.x$flipper_length_mm, na.rm = TRUE),
      mean_body_mass = mean(.x$body_mass_g, na.rm = TRUE),
      sd_body_mass = sd(.x$body_mass_g, na.rm = TRUE)
    ))
  ) %>%
  unnest(stats)
```
